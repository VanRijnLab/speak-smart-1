mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
#scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
ggtitle("Distribution of reaction times") +  labs(x="RT (ms)", y="Time (minutes)", fill = "Block")  +
ggsave("fig3.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
dat_study %>%
filter(rt < 7500) %>%
filter(correct == 1) %>%  # only plot correct responses
mutate(t_min = factor(floor(time) + 1, ordered = TRUE)) %>%
mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
#scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
ggtitle("Distribution of reaction times") +  labs(x="RT (ms)", y="Time (minutes)", fill = "Block")  +
#ggsave("fig3.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
ss_palette <- c("#A4262C", "#038387")
dat_study %>%
filter(rt < 7500) %>%
filter(correct == 1) %>%  # only plot correct responses
mutate(t_min = factor(floor(time) + 1, ordered = TRUE)) %>%
mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
#scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
ggtitle("Distribution of reaction times") +  labs(x="RT (ms)", y="Time (minutes)", fill = "Block")
#ggsave("fig3.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
dat_study %>%
filter(rt < 6000) %>%
filter(correct == 1) %>%  # only plot correct responses
mutate(t_min = factor(floor(time) + 1, ordered = TRUE)) %>%
mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
ggtitle("Distribution of reaction times") +  labs(x="RT (ms)", y="Time (minutes)", fill = "Block")
dat_study %>%
filter(rt < 6000)
View(dat_study)
## FIGURE 3 ##
ss_palette <- c("#A4262C", "#038387")
dat_study %>%
filter(rt < 6) %>%
filter(correct == 1) %>%  # only plot correct responses
mutate(t_min = factor(floor(time) + 1, ordered = TRUE)) %>%
mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
ggtitle("Distribution of reaction times") +  labs(x="RT (ms)", y="Time (minutes)", fill = "Block")
ggsave("fig3.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
ss_palette <- c("#A4262C", "#038387")
dat_study$rt <- dat_study$rt * 1000
dat_study %>%
filter(rt < 6000) %>%
filter(correct == 1) %>%  # only plot correct responses
mutate(t_min = factor(floor(time) + 1, ordered = TRUE)) %>%
mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
ggtitle("Distribution of reaction times") +  labs(x="RT (ms)", y="Time (minutes)", fill = "Block")
ggsave("fig3.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
## FIGURE 3 ##
ss_palette <- c("#A4262C", "#038387")
dat_study$rt <- dat_study$rt * 1000
dat_study %>%
filter(rt < 6000) %>%
filter(correct == 1) %>%  # only plot correct responses
mutate(t_min = factor(floor(time) + 1, ordered = TRUE)) %>%
mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
#ggtitle("Distribution of reaction times")
labs(x="RT (ms)", y="Time (minutes)", fill = "Block")
ggsave("fig3.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
## FIGURE 3 ##
ss_palette <- c("#A4262C", "#038387")
dat_study$rt <- dat_study$rt * 1000
dat_study %>%
filter(rt < 6000) %>%
filter(correct == 1) %>%  # only plot correct responses
mutate(t_min = factor(floor(time) + 1, ordered = TRUE)) %>%
mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
ggtitle("Distribution of reaction times") +
labs(x="RT (ms)", y="Time (minutes)", fill = "Block")
ggsave("fig3.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
theme_set(theme_minimal())
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# function to compute model fit
r2.corr.mer <- function(m) {
lmfit <-  lm(model.response(model.frame(m)) ~ fitted(m))
summary(lmfit)$r.squared
}
# correlation heatmap functions:
source("cor_heatmap_BF.R")
# import slimstampen functions (make sure they are stored in the same wd):
source("slimstampen_model_funs.R")
## 2. IMPORTING DATA ##
# set working directory:
# setwd("~/Desktop/frontiersAI")
# import minor thesis slimstampen data:
dat <- read_excel('full.xlsx')
#dat$Block <- revalue(dat$block, c("A" = "AT", "B" = "AS", "C" = "FS"))  ## THIS BREAKS ALL YOUR CODE BELOW!!
#dat$types <- revalue(dat$types, c("study" = "Study", "test" = "Test"))
dat_study <-dat[(dat['types'] == 'study'),]
dat_study <-dat_study[(dat_study['block'] != 'C'),]     # do not analyse block C
ss_palette <- c("#A4262C", "#038387")
dat_study %>%
filter(rt < 6000) %>%
filter(correct == 1) %>%  # only plot correct responses
mutate(t_min = factor(floor(time) + 1, ordered = TRUE)) %>%
mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
ggtitle("Distribution of reaction times") +
labs(x="RT (ms)", y="Time (minutes)", fill = "Block")
ggsave("fig3.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
dat_study %>%
filter(rt < 6000) %>%
filter(correct == 1) %>%  # only plot correct responses
mutate(t_min = factor(floor(time) + 1, ordered = TRUE)) %>%
mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
# ggtitle("Distribution of reaction times") +
labs(x="RT (ms)", y="Time (minutes)", fill = "Block")  +
ggsave("fig3.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
dat_study %>%
filter(rt < 6000) %>%
filter(correct == 1) %>%  # only plot correct responses
mutate(t_min = factor(floor(time) + 1, ordered = TRUE)) %>%
mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
ggtitle() + labs(x="RT (ms)", y="Time (minutes)", fill = "Block")  +
ggsave("fig3.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
## FIGURE 3 ##
ss_palette <- c("#A4262C", "#038387")
dat_study %>%
filter(rt < 6000) %>%
filter(correct == 1) %>%  # only plot correct responses
mutate(t_min = factor(floor(time) + 1, ordered = TRUE)) %>%
mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
ggtitle("") + labs(x="RT (ms)", y="Time (minutes)", fill = "Block")  +
ggsave("fig3.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
dat$time <- dat$timestamp/60000 # convert timestamps to minutes
# set time to zero at the start of each block for each participant:
for(i in unique(dat$ppn)) {
dat_select <-dat[(dat$ppn == i),]
individual_block_start_times <- (dat_select[!duplicated(dat_select$block),'time'])
dat[(dat$ppn == i & dat$block == 'A'), 'time'] <- (dat[(dat$ppn == i & dat$block == 'A'), 'time'] - individual_block_start_times[[1,1]])
dat[(dat$ppn == i & dat$block == 'B'), 'time'] <- (dat[(dat$ppn == i & dat$block == 'B'), 'time'] - individual_block_start_times[[2,1]])
dat[(dat$ppn == i & dat$block == 'C'), 'time'] <- (dat[(dat$ppn == i & dat$block == 'C'), 'time'] - individual_block_start_times[[3,1]])
}
dat_study <-dat[(dat['types'] == 'study'),]
dat_study <-dat_study[(dat_study['block'] != 'C'),]     # do not analyse block C
## FIGURE 3 ##
ss_palette <- c("#A4262C", "#038387")
dat_study %>%
filter(rt < 6000) %>%
filter(correct == 1) %>%  # only plot correct responses
mutate(t_min = factor(floor(time) + 1, ordered = TRUE)) %>%
mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
ggtitle("") + labs(x="RT (ms)", y="Time (minutes)", fill = "Block")  +
ggsave("fig3.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
ss_palette <- c("#A4262C", "#038387")
dat_study %>%
filter(rt < 6000) %>%
filter(correct == 1) %>%  # only plot correct responses
mutate(t_min = factor(floor(time) + 1, ordered = TRUE)) %>%
mutate(block_lbl = ifelse(block == "A", "AT", "AS")) %>%  # make nicer labels
ggplot(aes(rt, t_min, fill = block_lbl)) +
scale_fill_manual(values=cbPalette) +
scale_x_discrete(labels = c('Typing','Speaking')) +
geom_density_ridges(scale = 2, alpha = .6,
# maybe adding medians will make the trend easier to see:
quantile_lines = TRUE, quantiles = 2) +
scale_y_discrete(expand = c(0, 0), breaks = 1:12, labels = 1:12) +     # remove the empty bin with 13 minutes at the top of the graph
scale_x_continuous(expand = c(0, 0)) +
coord_cartesian(clip = "off") +
theme_ridges() +
NULL +
ggtitle("") + labs(x="RT (ms)", y="Time (minutes)", fill = "Block")
ggsave("fig3.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
acc_offset <- .025
dat_study %>%
mutate(Block = ifelse(block == "A", "AT", "AS")) %>%
# offset the actual accuracy a bit so the blocks don't overlap:
mutate(offset_correct = ifelse(Block == "AT", correct - acc_offset, correct + acc_offset)) %>%
ggplot(aes(y=correct,x=exp_act_norm, color = Block)) +
scale_fill_manual(values=cbPalette) +
scale_color_manual(values=cbPalette) +
geom_point(aes(y = offset_correct),
alpha = 0.1, position = position_jitter(height = acc_offset), size = 1) +
stat_smooth(method='glm', method.args=list(family='binomial'),se=TRUE) +
#ggtitle("Predicting accuracy from reaction times") +
labs(x="Estimated activation (normalized)", y="Accuracy") +
theme_ridges() +
NULL
ggsave("fig4.pdf", width = 6, height = 5, path = "~/Desktop/plots" )
dat_study$rt = dat_study$rt/1000  # rt to seconds
dat_study$expected_activation_from_rt = -log(dat_study$rt-0.3) # compute predicted activation based on RT
dat_study$expected_accuracy_from_rt = 1/(1+exp(((-0.8 - dat_study$expected_activation_from_rt)/0.1)))  # compute predicted accuracy based on prdicted RT
dat_study$exp_act_norm = normalize(dat_study$expected_activation_from_rt)
dat_study_A <-dat_study[(dat_study$block == 'A'),]     # ss typing
dat_study_B <-dat_study[(dat_study$block == 'B'),]     # ss speaking
dat_study_C <-dat_study[(dat_study$block == 'C'),]     # flashcard speaking
# models with normalized RT's:
typing_norm = glmer(correct ~ exp_act_norm + ((1 | ppn) + (1 | fact_id)), data = dat_study_A, family = 'binomial')
speaking_norm = glmer(correct ~ exp_act_norm + ((1 | ppn) + (1 | fact_id)), data = dat_study_B, family = 'binomial')
## FIGURE 4 ##
# plot (predicting accuracy from RT-based estimated accuracy (normalized))
acc_offset <- .025
dat_study %>%
mutate(Block = ifelse(block == "A", "AT", "AS")) %>%
# offset the actual accuracy a bit so the blocks don't overlap:
mutate(offset_correct = ifelse(Block == "AT", correct - acc_offset, correct + acc_offset)) %>%
ggplot(aes(y=correct,x=exp_act_norm, color = Block)) +
scale_fill_manual(values=cbPalette) +
scale_color_manual(values=cbPalette) +
geom_point(aes(y = offset_correct),
alpha = 0.1, position = position_jitter(height = acc_offset), size = 1) +
stat_smooth(method='glm', method.args=list(family='binomial'),se=TRUE) +
#ggtitle("Predicting accuracy from reaction times") +
labs(x="Estimated activation (normalized)", y="Accuracy") +
theme_ridges() +
NULL
ggsave("fig4.pdf", width = 6, height = 5, path = "~/Desktop/plots" )
# remove instruction trials
datm <- datm[(datm['trial_type'] == 'html-voicekey-response'),]
# drop irrelevant columns
datm$value <- NULL
datm$trial_type <- NULL
datm$internal_node_id <- NULL
datm$subject <- NULL
datm$browser_info <- NULL
datm$view_history <- NULL
datm$keypresses <- NULL
datm$responses <- NULL
datm$text <- NULL
datm$threshold <- -0.8
# rename columns that need to be renamed
colnames(datm)[which(names(datm) == "id")] <- "fact_id"
colnames(datm)[which(names(datm) == "presentation_start_time")] <- "start_time"
colnames(datm)[which(names(datm) == "participant_number")] <- "userId"
colnames(datm)[which(names(datm) == "answer")] <- "text"
# create a unique id for each participant and each fact:
participants <- unique(datm$userId)
facts <- unique(datm$fact_id)
# create a dataframe to store the alpha values
rofs <- as.data.frame(matrix(NA, 0, 3))
colnames(rofs)[which(names(rofs) == "V1")] <- "ppn"
colnames(rofs)[which(names(rofs) == "V2")] <- "fact_id"
colnames(rofs)[which(names(rofs) == "V3")] <- "rof"
# compute alpha for each participant:
i = 0
for (participant in participants) {
for (current_fact_id in facts) {
i = i+1
#print (current_fact_id)
# calculate the activation and alpha for the fact
alpha_for_participant_and_fact <-calculate_alpha(Inf, current_fact_id, 0.3, datm[datm$userId == participant,])
rofs[i,1] <- participant
rofs[i,2] <- current_fact_id
rofs[i,3] <- alpha_for_participant_and_fact
}
}
# alpha summaries:
summary <- aggregate(rofs[,3], list(rofs$ppn), mean)
mem$RoF <- summary$x
correlations <- select(mem, CeradDistance, Age, MOCA, RoF)
cor_heatmap_BF(correlations)
cor.test(correlations$RoF, correlations$CeradDistance, method = c("pearson"))
# add memory scores to ss dataset
datm$MOCA <- NA
datm$CERADd <- NA
for(i in unique(datm$userId)) {
datm[datm$userId == i, 'MOCA']  <- mem[mem$Subject == i, 'MOCA']
datm[datm$userId == i, 'CERADd']  <- mem[mem$Subject == i, 'CeradDistance']
}
# 4.2 Analyses: can we used speech-based RT as a proxy of actual accuracy, even in elderly/MCI populations?
datm[datm == Inf] <- 6000
datm[datm == 'Infinity'] <- 6000
datm[datm == '-Infinity'] <- -6000
datm[datm == -Inf] <- -6000
datm$rt <- as.numeric(datm$rt)/1000  # rt to seconds
datm$expected_activation_from_rt = -log(datm$rt-0.3) # compute predicted activation based on RT
datm$expected_accuracy_from_rt = 1/(1+exp(((-0.8 - datm$expected_activation_from_rt)/0.1)))  # compute predicted accuracy based on prdicted RT
datm$exp_act_norm = normalize(datm$expected_activation_from_rt)
# fit different models, using the MOCA-memroy score and the CERAD distance memory score
# moca:
magdeburg_moca <- glmer(correct ~ expected_activation_from_rt + MOCA +((1 | userId) + (1 | fact_id)), data = datm, family = 'binomial')
# CERAD distance:
magdeburg_cerad <- glmer(correct ~ expected_activation_from_rt + CERADd +((1 | userId) + (1 | fact_id)), data = datm, family = 'binomial')
# none of both:
magdeburg <- glmer(correct ~ expected_activation_from_rt + ((1 | userId) + (1 | fact_id)), data = datm, family = 'binomial')
# moca w interaction effect:
magdeburg_moca_int <- glmer(correct ~ expected_activation_from_rt * MOCA +((1 | userId) + (1 | fact_id)), data = datm, family = 'binomial')
# cerad w interaction effect:
magdeburg_cerad_int <- glmer(correct ~ expected_activation_from_rt * CERADd +((1 | userId) + (1 | fact_id)), data = datm, family = 'binomial')
magdeburg_cerad_int_norm <- glmer(correct ~ exp_act_norm* CERADd +((1 | userId) + (1 | fact_id)), data = datm, family = 'binomial')
summary(magdeburg_cerad_int_norm)
anova(magdeburg, magdeburg_moca, magdeburg_cerad, magdeburg_cerad_int, magdeburg_moca_int)
# the CERAD-distance interaction model is the best model!
# simulate some data to check model fits:
simulated_data <- crossing(rt = c(0.5, 1.5, 3, 4.5), CERADd = c(-5,-2.5, 0,2.5, 5))
simulated_data$expected_activation_from_rt =  -log(simulated_data$rt-0.3)
simulated_data$prediction <- predict(magdeburg_cerad_int, newdata=simulated_data, type = 'response', re.form = NA)
simulated_data$exp_act_norm <- normalize(simulated_data$expected_activation_from_rt)
simulated_data$prediction_norm <- predict(magdeburg_cerad_int_norm, newdata=simulated_data, type = 'response', re.form = NA)
## FIGURE 6 ##
# plot cerad distance:
p1 <- ggplot(dat = simulated_data, aes(x = CERADd, y = prediction_norm, color = factor(rt))) +
#theme(legend.position="none") +
geom_line(size=1) +
geom_point () +
scale_color_manual(values=cbPalette2) +
scale_y_continuous(limits = c(0.4, 1)) +
ggtitle("Simulated model fit") +  labs(x="CERAD distance", y="Predicted accuracy") +
theme_ridges()
p1 + labs(color = "Reaction time (s)")
ggsave("fig6.pdf", width = 8, height = 5, path = "~/Desktop/plots" )
p1 <- ggplot(dat = simulated_data, aes(x = CERADd, y = prediction_norm, color = factor(rt))) +
#theme(legend.position="none") +
geom_line(size=1) +
geom_point () +
scale_color_manual(values=cbPalette2) +
scale_y_continuous(limits = c(0.4, 1)) +
ggtitle("") +  labs(x="CERAD distance", y="Predicted accuracy") +
theme_ridges()
p1 + labs(color = "Reaction time (s)")
ggsave("fig6.pdf", width = 8, height = 5, path = "~/Desktop/plots" )
ss_palette <- c("#40587C","#CA5010")
cbPalette2 <- c("#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
RT <- dat_BC %>%
mutate(Block = ifelse(block == "B", "AS", "FS")) %>%
ggplot(aes(x=Block, y=rt, color = as.factor(types))) +
geom_line(stat="summary", fun.y="median", position = pd, alpha = 3/4, aes(group = types), size =1) +
scale_color_manual(values=cbPalette2) +
geom_errorbar(stat="summary", fun.data="mean_se", fun.args = list(mult = 1.96), position = pd, width = .2, size =1) +
geom_point(stat="summary", fun.y="median", position = pd, size = 2.8) +
ggtitle("") +  labs(x=NULL, y="Average RT (ms)") +
theme_ridges() +
NULL
correct <- dat_BC %>%
mutate(Block = ifelse(block == "B", "AS", "FS")) %>%
ggplot(aes(x=Block, y=correct, color = as.factor(types))) +
geom_line(stat="summary", fun.y="mean", position = pd, alpha = 3/4, aes(group = types), size =1) +
scale_color_manual(values=cbPalette2) +
geom_errorbar(stat="summary", fun.data="mean_se", fun.args = list(mult = 1.96), position = pd, width = .2, size =1) +
geom_point(stat="summary", fun.y="mean", position = pd, size = 2.8) +
ggtitle("") +  labs(x=NULL, y="Correctness (%)") +
theme_ridges() +
theme(legend.position="none")
correct +  RT + labs(color = "Session type")
ggsave("fig5.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
length(dat_study_A)
size(dat_study_A)
nrow(dat_study_A)
nrow(dat_study_A)
nrow(dat_study_B)
nrow(dat_study_A %>%
filter(rt < 6000))
nrow(dat_study_B %>%
filter(rt < 6000))
2151-2027
2027/2152
2685-2667
2667/2685
1 - (2667/2685)
(1 - (2667/2685))*100
(1-2027/2152)*100   # which is 9.4%
RT <- dat_BC %>%
mutate(Block = ifelse(block == "B", "AS", "FS")) %>%
ggplot(aes(x=Block, y=rt, color = as.factor(types))) +
geom_line(stat="summary", fun.y="median", position = pd, alpha = 3/4, aes(group = types), size =1) +
scale_color_manual(values=cbPalette2) +
geom_errorbar(stat="summary", fun.data="mean_se", fun.args = list(mult = 1.96), position = pd, width = .2, size =1) +
geom_point(stat="summary", fun.y="median", position = pd, size = 2.8) +
ggtitle("") +  labs(x=NULL, y="Median RT (ms)") +
theme_ridges() +
NULL
correct <- dat_BC %>%
mutate(Block = ifelse(block == "B", "AS", "FS")) %>%
ggplot(aes(x=Block, y=correct, color = as.factor(types))) +
geom_line(stat="summary", fun.y="mean", position = pd, alpha = 3/4, aes(group = types), size =1) +
scale_color_manual(values=cbPalette2) +
geom_errorbar(stat="summary", fun.data="mean_se", fun.args = list(mult = 1.96), position = pd, width = .2, size =1) +
geom_point(stat="summary", fun.y="mean", position = pd, size = 2.8) +
ggtitle("") +  labs(x=NULL, y="Correctness (%)") +
theme_ridges() +
theme(legend.position="none")
correct +  RT + labs(color = "Session type")
ggsave("fig5.pdf", width = 10, height = 5, path = "~/Desktop/plots" )
